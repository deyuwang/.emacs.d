#+TITLE: Emacs学习笔记

* 函数
** 字符串
*** 拼接
(concat str1 str2 ...)

*** 转换成大小写
(upcase "abc123")
(downcase "ABC123")

** 光标
*** 移动
;; M-<
(beginning-of-buffer)

;; M->
(end-of-buffer)


(goto-char (point-min)) 
(goto-line 2)

(beginning-of-line)
(end-of-line)

(move-beginning-of-line 1)
(move-end-of-line 1)

(forward-line)

;;移动光标并跳过指定的一些字符,返回跳过字符个数
(skip-chars-forward "\t \n")

;;移动光标并跳过指定的一些字符,返回跳过字符个数（负数）
(skip-chars-backward "\t ")   

*** 位置
(point-max)
(point-min)
(point)

** Buffer
*** 获取或者创建一个
(get-buffer-create "*scratch2*")
*** 清空
(erase-buffer)
*** 切换
(switch-to-buffer buf)

;; 程序切换到另外一个buffer里，当前界面不改变
(set-buffer "emacs-diary.org")

*** 关闭
(kill-buffer buf)

*** 保存
(save-buffer)

*** 获取文件名称
(buffer-file-name buffer)

*** 获取文件所在目录
(let (dir (file-name-directory (buffer-file-name (current-buffer))))

*** 当前buffer
(current-buffer)

*** 使用临时buffer
(with-temp-buffer "*temp*"
		  (insert "hasdf")
		  (buffer-string))

*** 全选
*** 当前buffer一部分内容插入到另外一个buffer
(append-to-buffer buffer 1 10)
*** 从别的buffer获取内容插入到当前
(insert-buffer-substring buffer 1 10)
*** 判断是buffer名称还是buffer对象
(bufferp "*scratch*") ;nil
(bufferp (get-buffer "*scratch*")) ; t
*** 标记整个buffer
;; C-x h
(mark-whole-buffer)
** 文件
*** 列出指定目录下匹配的文件列表
(directory-files dir t match)

*** 插入文件内容
(insert-file-contents "c:abc.txt")

*** 临时文件
(with-temp-file "d:\\etmp.txt"
  (insert "hello"))
d盘下就会创建一个文件，内容为hello

** 数值
(int-to-string 3)
** 日期
*** 默认的日记文件位置
(setq diary-file "~/.emacs.d/diary") or (setq diary-file "~/.emacs.d/diary.gpg")

** 文本
*** 插入字符串
(insert str)

*** 标记一个单词（选中）
(mark-word)

*** 删除若干个单词
(kill-word n)

*** 查找替换
(while (search-forward oldstr) 
    (replace-match newstr)))

** 系统
*** 打开指定目录(windows资源管理器)
(w32-shell-execute "open" dir)

*** 执行系统指令
(shell-command "notepad")

** web
*** 浏览指定url
打开系统浏览器
(browse-url (concat "http://localhost:9090/" (buffer-name (current-buffer))))
*** 启动http服务器
把当前buff文件所在目录作为webserver的root路径" 
(defun wdy-run-httpd-in-current-path()
  "把当前buff文件所在目录作为webserver的root路径"
  (message (file-name-directory (buffer-file-name (current-buffer))))
  (setq httpd-root (file-name-directory (buffer-file-name (current-buffer))))
  (setq httpd-port 9090)
  (httpd-start))

** 时间
*** 当前时间
(current-time-string)

*** 格式化时间
(format-time-string "[%Y-%m-%d, %a]")
** Emacs版本号
(emacs-version)
"GNU Emacs 24.4.1 (i686-pc-mingw32)
 of 2014-10-25 on LEG570"

** 进程

(start-process "wscript" nil "wscript" "d:/speak.vbs")

(start-process NAME BUFFER PROGRAM &rest PROGRAM-ARGS)

** 定时
;;每隔几秒报一次时间
(setq n 0)
(defun abc ()
  (if (< n 3)
      (progn
	(setq n (1+ n))
	(wdy-date)
	(run-with-timer 3 nil 'abc))))
(abc)
* 操作多台主机
(setq *hosts* '("127.0.0.1" "127.0.0.2"))

(defun ssh->hosts ()
  "SSH到列表中的主机"
  (dolist (host *hosts*)
    (shell host)
    ;;(insert (format "ssh %s" host))
    (comint-send-input)))

(defun run (command)
  "执行Shell命令"
  (let ((current-buf (current-buffer)))
      (dolist (host *hosts*)
        (shell host)
        (insert command)
        (comint-send-input))
      (switch-to-buffer current-buf)))


(run "pwd")

(defun newline-and-submit ()
  "获取并作为Shell命令执行当前行的内容，然后插入换行"
  (interactive)
  (let ((line (current-line-string)))
    (run line)
    (reindent-then-newline-and-indent)))

(defun current-line-string ()
  "获得当前行的字符串内容"
  (interactive)
  (buffer-substring-no-properties (line-beginning-position) (line-end-position)))

(local-set-key (kbd "<RET>") 'newline-and-submit)
(local-set-key (kbd "<C-return>") 'newline-and-submit)

* 《mastering emacs》
** Counting Things
M-x count-lines-region Counts number of lines in the region
M-x count-matches Counts number of patterns that match in a region
M-x count-words Counts words, lines and chars in the buffer
M-x count-words-region , M-= Counts words, lines and chars in the region

** Joining and Splitting Lines
C-o Inserts a blank line after point
C-x C-o Deletes all blank lines after point
C-M-o Splits a line after point, keeping the indentation
M-ˆ Joins the line the point is on with the one above

** Whitespace Commands
M-\\ Deletes all spaces and tabs around the point
C-x C-o Delete blank lines

** Whitespace Minor Mode
M-x whitespace-mode Minor mode that highlights all whitespace characters
M-x whitespace-newline-mode Minor mode that displays newline characters with a $

** Whitespace report
M-x whitespace-report Shows whitespace issues
M-x whitespace-report-region As above but for the region
M-x whitespace-clean-up Attempts automatic cleanup
M-x whitespace-clean-up-region As above but for the region

** Changing Case
C-x C-u uppercases the region
c-x c-l lowercases the region
m-x upcase-initials-region Capitalizes the region

** Switch two word
M-t Transpose Words
C-M-t  Transpose S-expressions 调换两个

** 注释排版
M-x comment-box
M-q 自动换行，排版
C-u M-q 补齐到70长度
C-x f 设置宽度

** 排序
M-x sort-columns Sorts column(s) alphabetically
M-x sort-fields Sorts field(s) lexicographically
M-x sort-lines Sorts alphabetically
M-x sort-numeric-fields Sorts field(s) numerically
M-x sort-paragraphs Sorts paragraphs alphabetically,
M-x sort-regexp-fields Sorts by regexp-defined fields lexicographically

** 对齐
UNIVERSE_ANSWER_CONST= 42
UNIVERSE_QUESTION= "What is The Answer"

选中下面的文本
M-x align-regexp = 

** 滚动其他窗口内容
C-M-v Scroll down the other window
C-M-S-v Scroll up the other window

* 字节处理
** 十六进制字符转数字
(string-to-int "FF3F" 16)
(hexl-hex-string-to-integer "0F")

** 数字转16进制字符串
(format "%x" 5)
(format "%02x" 25)

* 实例
** 自动补全括号
(defun my-c-mode-auto-pair ()
  (interactive)
  (make-local-variable 'skeleton-pair-alist)
  (setq skeleton-pair-alist '(
    (?` ?` _ "''")
    (?\( ? _ " )")
    (?\[ ? _ " ]")
    (?{ \n > _ \n ?} >)))
  (setq skeleton-pair t)
  (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "`") 'skeleton-pair-insert-maybe)
  (local-set-key (kbd "[") 'skeleton-pair-insert-maybe))
(add-hook 'c-mode-hook 'my-c-mode-auto-pair)
(add-hook 'c++-mode-hook 'my-c-mode-auto-pair)

** 将文件模式和文件后缀关联起来
(setq auto-mode-alist
      ;; 将文件模式和文件后缀关联起来
      (append '(("\\.py\\'" . python-mode)
                ("\\.s?html?\\'" . html-helper-mode)
                ("\\.asp\\'" . html-helper-mode)
                ("\\.phtml\\'" . html-helper-mode)
                ("\\.css\\'" . css-mode))
              auto-mode-alist))
